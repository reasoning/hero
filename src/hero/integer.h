/*
Copyright (c) 2023 Emerson Clarke <ZeroToHero>

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#include "hero/structure.h"
#include "hero/string.h"

#include "hero/unsigned.h"
#include "hero/signed.h"


#ifdef HERO_USING_STD

#include <iosfwd>
#include <string>
#include <iostream>

#endif 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Hero {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






typedef unsigned short Digit;


class Integer : public Vector<Digit> 
{
public:



	
	Digit Base;

	
    
    
	Integer(int allocated) : Vector<Digit>(allocated) {}

	void Trim() 
	{ 
        
		while (Size > 0 && Data[Size - 1] == 0)
			Size--;
	}

public:
	
	Integer() : Vector<Digit>(), Base(2) {}

	Integer(const Integer &x) : Vector<Digit>(x), Base(x.Base) {}

	Integer(const Unsigned &x, Digit base);
	Integer(const Substring &s, Digit base);

	
	Integer(Digit *data, int size, Digit base);

	~Integer() {}

	void operator =(const Integer &x) 
	{
		Vector<Digit>::operator =(x);
		Base = x.Base;
	}

	
	

	
	String Str();

	
	
	Digit Get(int index) { return index >= Size ? 0 : Data[index]; }

	
	bool IsZero() { return Vector<Digit>::IsEmpty(); }

	
	
	bool operator == (const Integer &x) 
	{
		
		if (Base == x.Base && Size == x.Size)
		{
			for (int i=0;i<Size;++i)
				if (Data[i] != x.Data[i]) return false;

			return true;
		}

		return false;

	}

	bool operator != (const Integer &x) { return !operator ==(x); }



	
	static String UnsignedToString(const Unsigned &x);
	static String SignedToString(const Signed &x);

	static Unsigned StringToUnsigned(const String &s);
	static Signed StringToSigned(const String &s);


	
	template <class T>
	static Signed DataToSigned(const T* data, int size, int sign) 
	{
		
		unsigned int pieceSizeInBits = 8 * sizeof(T);
		unsigned int piecesPerBlock = sizeof(Block) / sizeof(T);
		unsigned int numBlocks = (size + piecesPerBlock - 1) / piecesPerBlock;

		
		Block *blocks = new Block[numBlocks];

		int blockNum, pieceNum, pieceNumHere;

		
		for (blockNum = 0, pieceNum = 0; blockNum < numBlocks; blockNum++) 
		{
			Block curBlock = 0;
			for (pieceNumHere = 0; pieceNumHere < piecesPerBlock && pieceNum < size;pieceNumHere++, pieceNum++)
				curBlock |= (Block(data[pieceNum]) << (pieceSizeInBits * pieceNumHere));
			blocks[blockNum] = curBlock;
		}

		
		Signed x(blocks, numBlocks, sign);

		delete [] blocks;
		return x;
	}

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef HERO_USING_STD




std::ostream &operator <<(std::ostream &os, const Unsigned &x);



std::ostream &operator <<(std::ostream &os, const Signed &x);


#endif 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







Unsigned GCD(Unsigned a, Unsigned b);



void ExtendedEuclidean(Signed m, Signed n,
		Signed &g, Signed &r, Signed &s);



Unsigned Modinv(const Signed &x, const Unsigned &n);


Unsigned Modexp(const Signed &base, const Unsigned &exponent,
		const Unsigned &modulus);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

} 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
