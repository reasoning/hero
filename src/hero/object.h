/*
Copyright (c) 2023 Emerson Clarke <ZeroToHero>

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "hero/platform.h"

#include "hero/interface.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Hero {

	class String;
}

namespace Hero {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Identity
{
public:

	static const int Same	= 0x00000000;
	static const int Null	= 0x00000000;
	static const int Error	= 0x80000001;

	void * operator () (void) 
	{

		return (void*)(const long *)this;
	}

	bool operator == (Identity &identity) {return this == &identity;}
	bool operator != (Identity &identity) {return this != &identity;}

	operator void * ()
	{

		return this;
	}
};

class Kind
{
public:

	virtual ~Kind() 
	{
	}

	static Identity	Instance;

	virtual Identity & Identify()=0;

	virtual bool InstanceOf(Identity &identity)	
	{
		return Identify() == identity;
	}

	virtual bool InstanceOf(Kind *kind)					
	{
		return Identify() == kind->Identify();
	}

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Object : public Kind, public Printable, public Comparable 
{
public:

	static Identity	Instance;

	virtual Identity & Identify() 
	{
		return Instance;
	} 

	using Kind::InstanceOf;
	virtual bool InstanceOf(Object *object)					
	{
		return InstanceOf(object->Identify());
	}

public:

	virtual ~Object()
	{
	}

	using Printable::Print;
	void Print(String & string);

	virtual bool Equals(Object *object, int comparitor=COMPARE_GENERAL);

	virtual int Compare(Object *object, int comparitor=COMPARE_GENERAL);	

	virtual int Hash();
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Inheritance
{
public:

	static bool IsHeterozygous(Object * left, Object * right)
	{
		return left->Identify() != right->Identify();
	}

	static bool IsHomozygous(Object * left, Object * right)
	{
		return left->Identify() == right->Identify();
	}

	static bool IsDominant(Object * left, Object * right)
	{
		return left->InstanceOf(right);
	}

	static bool IsRecessive(Object * left, Object * right)
	{
		return ! left->InstanceOf(right);
	}

	static int Compare(Object * left, Object * right)
	{
		if (IsDominant(left,right))
		{
			return left->Compare(right);
		}
		else
		{
			int result = right->Compare(left);
			return (result)?-result:0;
		}
	}
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Enumerator
{
public:

	virtual bool Has()=0;

	virtual bool Move(int amount)=0;
	virtual bool Move()=0;

	virtual bool Forward()=0;
	virtual bool Reverse()=0;

	virtual int Index()=0;

	virtual Object * operator()(void)=0;
	virtual Object * Pointer()=0;
	virtual Object & Reference()=0;

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

} 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

