/*
Copyright (c) 2023 Emerson Clarke <ZeroToHero>

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#pragma once

#ifdef HERO_PLATFORM_POSIX

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wsign-conversion"
#pragma clang diagnostic ignored "-Wunused-parameter"

#endif

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef HERO_USING_STD
#include <iomanip>
#include <ostream>
#include <vector>
#include <array>
#endif

#include "hero/assert.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Hero {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Substring;
class String;

class Writer;
class Reader;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Reader
{
public:

	virtual bool IsReadable()=0;

	virtual int Read() {return 0;}

	virtual int Read(char &data) {return Read(&data,1);}

	virtual int Read(char * data, int size)=0;

	virtual int Read(Substring &str, int amount=0);
	virtual int Read(String &string, int amount=0);
	virtual int Read(Writer & writer, int amount=0);

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Writer
{
public:

	virtual bool IsWriteable()=0;

	virtual int Write() {return 0;}

	virtual int Write(char & data) {return Write(&data,1);}

	virtual int Write(char * data , int size)=0;

	virtual int Write(Substring &str,int amount=0);
	virtual int Write(String & string, int amount=0);
	virtual int Write(Reader & reader, int amount=0);
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Stream;

int StreamWrite(Stream & stream, int & value);
int StreamRead(Stream & stream, int & value);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Stream : public Reader, public Writer
{
public:

	Stream():Position(0) {};
	virtual ~Stream() {};

public:

	int Position;

	enum StreamOrigin {ORIGIN_BEGIN=-1,ORIGIN_CURRENT=0,ORIGIN_END=1};

	virtual int Seek(int position, int origin=-1) {return 0;}

	virtual bool IsAbsolute(){return true;}
	virtual bool IsRelative(){return !IsAbsolute();}

	template <typename _Value_>
	int StreamWrite(const _Value_ & value) 
	{
		using Hero::StreamWrite;
		Hero::StreamWrite(*this,value);
	}

	template <typename _Value_>
	int StreamRead(_Value_ & value)
	{
		using Hero::StreamRead;
		Hero::StreamRead(*this,value);
	}

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class StreamFilter : public Stream
{
public:

	class Stream * Stream;

	StreamFilter(class Stream & stream):Stream(&stream) {}
	StreamFilter(class Stream * stream):Stream(stream) {}
	StreamFilter():Stream(0) {}
	~StreamFilter() {}

	int Seek(int position, int origin = -1)				
	{

		if (Stream->IsAbsolute())
			Position = Stream->Seek(position,origin);

		return Position;
	}

	bool IsReadable()		{return Stream->IsReadable();}
	bool IsWriteable()		{return Stream->IsWriteable();}

	using Stream::Read;
	int Read(char * data, int size)		
	{
		int read = Stream->Read(data,size);
		Position += read;
		return read;
	}

	using Stream::Write;
	int Write(char * data , int size)	
	{
		int write = Stream->Write(data,size);
		Position += write;
		return write;
	}

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

} 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef HERO_USING_STD

namespace std {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline std::ostream& operator<<(std::ostream& os, std::vector<uint8_t> const& arr)
{
    std::ios_base::fmtflags f(os.flags());
    os << "[" << std::hex << std::setfill('0');
    for (auto byte : arr) {
        os << ' ' << std::setw(2) << +(unsigned char)byte;
    }
    os << " ]";
    os.flags(f);
    return os;
}

template <typename T, std::enable_if_t<std::is_integral<T>::value, bool> = true>
inline std::ostream& operator<<(std::ostream& os, std::vector<T> const& arr)
{
    os << "[";
    for (auto element : arr) {
        os << ' ' << element;
    }
    os << " ]";
    return os;
}

template <typename T, std::enable_if_t<!std::is_integral<T>::value, bool> = true>
inline std::ostream& operator<<(std::ostream& os, std::vector<T> const& arr)
{
    os << "[\n";
    for (auto element : arr) {
        os << ' ' << element << '\n';
    }
    os << "]\n";
    return os;
}

template <size_t S> inline std::ostream& operator<<(std::ostream& os, std::array<uint8_t, S> const& arr)
{
    std::ios_base::fmtflags f(os.flags());
    os << "[" << std::hex << std::setfill('0');
    for (auto byte : arr) {
        os << ' ' << std::setw(2) << +(unsigned char)byte;
    }
    os << " ]";
    os.flags(f);
    return os;
}

template <typename T, size_t S> inline std::ostream& operator<<(std::ostream& os, std::array<T, S> const& arr)
{
    std::ios_base::fmtflags f(os.flags());
    os << "[" << std::hex << std::setfill('0');
    for (auto element : arr) {
        os << ' ' << element;
    }
    os << " ]";
    os.flags(f);
    return os;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

} 

#endif

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using namespace Hero;

inline void StreamWrite(Stream & s, const unsigned char& value)
{
    s.Write((char*)&value,sizeof(unsigned char));
}

inline void StreamWrite(Stream & s, const unsigned short& value)
{
    s.Write((char*)&value,sizeof(unsigned short));
}

inline void StreamWrite(Stream & s, const unsigned int& value)
{
    s.Write((char*)&value,sizeof(unsigned int));
}

inline void StreamWrite(Stream & s, const unsigned long long& value)
{
    s.Write((char*)&value,sizeof(unsigned long long));
}

inline void StreamRead(Stream & s, unsigned char& value)
{
    s.Read((char*)&value,sizeof(unsigned char));
}

inline void StreamRead(Stream & s, unsigned short& value)
{
    s.Read((char*)&value,sizeof(unsigned short));
}

inline void StreamRead(Stream & s, unsigned int& value)
{
    s.Read((char*)&value,sizeof(unsigned int));
}

inline void StreamRead(Stream & s, unsigned long long& value)
{
    s.Read((char*)&value,sizeof(unsigned long long));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

