/*
Copyright (c) 2023 Emerson Clarke <ZeroToHero>

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#pragma once


#pragma warning(disable:4200)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#include <string.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


namespace Hero {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


template<typename _X_,typename _Y_>
static int Min(_X_ x, _Y_ y) {return x < y ? x : y;}

template<typename _X_,typename _Y_>
static int Max(_X_ x,_Y_ y)	{return x > y ? x : y;}

template<typename _X_>
static int Abs(_X_ x) {return (x >= 0) ? x : -x;}

template<typename _X_,typename _Y_>
static int Compare(_X_ x, _Y_ y) {return Abs(x) - Abs(y);}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class Intervals
{
public:
	
	enum
	{
		INTERVAL_OPEN,
		INTERVAL_HALF,		
	};
};









class Indices 
{
public:

	
	

	
	
	
	struct Indexes
	{		
		
		int * Value;
		
		Indexes(int count=0):Value(0) {Value = new int[count];}
		~Indexes() {delete [] Value;}

		template<typename _Prefix_>
		void Set(int offset, _Prefix_ p)
		{
			Value[offset++] = p;
		}

		
		template<typename _Prefix_, typename... _Suffix_>
		void Set(int offset, _Prefix_ p, _Suffix_... s)
		{
			Value[offset++] = p;
			Set(offset,s...);
		}
		


	};
	
	int Count;
	Indexes * Index;

	Indices():Index(0) {}
	
	template<typename... _Args_>
	Indices(_Args_... args):Index(0)
	{
		Count = (int)sizeof...(args);
		Index = new Indexes(Count);
		Index->Set(0,args...);
	}

	~Indices() 
	{
		if (Index) delete Index;
	}

	int operator[] (int index) const
	{
		if (index > Count || !Index) return -1;
		return Index->Value[index];
	}

	

	

	
	
	

	static inline bool IsAbsolute(int index, int length)
	{
		return index >= 0 && index < length; 
	}

	static inline bool IsRelative(int index, int length)
	{
		return (index < 0 && index >= -length);
	}
	
	static inline bool Normalise(int & index, int length, bool bounded=true)
	{
		
		
		
		
			
		if (index < -length || index > length)
			return false;

		
		
		if (bounded && index == length)
			return false;
		
		if (index < 0) index += length;
		
		return true;	
				
		
		
		
		
			
		
		
		
				
		
	}

	static inline bool Bounded(int index, int length)
	{
		
		
		
		return index >= 0 && index < length;
	}


};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


} 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
